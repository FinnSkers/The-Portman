// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials authentication
  
  // Additional user fields
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  isActive      Boolean   @default(true)
  role          UserRole  @default(USER)
  
  // Profile information
  bio           String?
  location      String?
  website       String?
  linkedin      String?
  github        String?
  
  // System fields
  accounts      Account[]
  sessions      Session[]
  cvUploads     CVUpload[]
  portfolios    Portfolio[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Additional PORTMAN-specific models
model CVUpload {
  id            String    @id @default(cuid())
  userId        String
  fileName      String
  fileSize      Int
  mimeType      String
  uploadedAt    DateTime  @default(now())
  processedAt   DateTime?
  status        CVStatus  @default(PENDING)
  
  // CV data
  extractedData Json?
  analysisData  Json?
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("cv_uploads")
}

model Portfolio {
  id            String      @id @default(cuid())
  userId        String
  name          String
  slug          String      @unique
  templateId    String
  
  // Portfolio configuration
  customizations Json
  isPublished   Boolean     @default(false)
  publishedAt   DateTime?
  
  // Metadata
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  viewCount     Int         @default(0)
  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("portfolios")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum CVStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
